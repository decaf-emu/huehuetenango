// AUTOGENERATED FILE: easyjson marshaler/unmarshalers.

package schema

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD0dbfd34DecodeGithubComDecafEmuHuehuetenangoPkgImporterSchema(in *jlexer.Lexer, out *RPL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "exports":
			if in.IsNull() {
				in.Skip()
				out.Exports = nil
			} else {
				if out.Exports == nil {
					out.Exports = new(Exports)
				}
				(*out.Exports).UnmarshalEasyJSON(in)
			}
		case "imports":
			if in.IsNull() {
				in.Skip()
				out.Imports = nil
			} else {
				in.Delim('[')
				if out.Imports == nil {
					if !in.IsDelim(']') {
						out.Imports = make([]*Imports, 0, 8)
					} else {
						out.Imports = []*Imports{}
					}
				} else {
					out.Imports = (out.Imports)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Imports
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Imports)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Imports = append(out.Imports, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "fileinfo":
			easyjsonD0dbfd34Decode(in, &out.FileInfo)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD0dbfd34EncodeGithubComDecafEmuHuehuetenangoPkgImporterSchema(out *jwriter.Writer, in RPL) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"exports\":")
	if in.Exports == nil {
		out.RawString("null")
	} else {
		(*in.Exports).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"imports\":")
	if in.Imports == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Imports {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fileinfo\":")
	easyjsonD0dbfd34Encode(out, in.FileInfo)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RPL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD0dbfd34EncodeGithubComDecafEmuHuehuetenangoPkgImporterSchema(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RPL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD0dbfd34EncodeGithubComDecafEmuHuehuetenangoPkgImporterSchema(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RPL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD0dbfd34DecodeGithubComDecafEmuHuehuetenangoPkgImporterSchema(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RPL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD0dbfd34DecodeGithubComDecafEmuHuehuetenangoPkgImporterSchema(l, v)
}
func easyjsonD0dbfd34Decode(in *jlexer.Lexer, out *struct {
	Filename string `json:"filename"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filename":
			out.Filename = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD0dbfd34Encode(out *jwriter.Writer, in struct {
	Filename string `json:"filename"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"filename\":")
	out.String(string(in.Filename))
	out.RawByte('}')
}
func easyjsonD0dbfd34DecodeGithubComDecafEmuHuehuetenangoPkgImporterSchema1(in *jlexer.Lexer, out *Imports) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]string, 0, 4)
					} else {
						out.Data = []string{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Data = append(out.Data, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "functions":
			if in.IsNull() {
				in.Skip()
				out.Functions = nil
			} else {
				in.Delim('[')
				if out.Functions == nil {
					if !in.IsDelim(']') {
						out.Functions = make([]string, 0, 4)
					} else {
						out.Functions = []string{}
					}
				} else {
					out.Functions = (out.Functions)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Functions = append(out.Functions, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD0dbfd34EncodeGithubComDecafEmuHuehuetenangoPkgImporterSchema1(out *jwriter.Writer, in Imports) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v6, v7 := range in.Data {
			if v6 > 0 {
				out.RawByte(',')
			}
			out.String(string(v7))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"functions\":")
	if in.Functions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in.Functions {
			if v8 > 0 {
				out.RawByte(',')
			}
			out.String(string(v9))
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Imports) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD0dbfd34EncodeGithubComDecafEmuHuehuetenangoPkgImporterSchema1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Imports) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD0dbfd34EncodeGithubComDecafEmuHuehuetenangoPkgImporterSchema1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Imports) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD0dbfd34DecodeGithubComDecafEmuHuehuetenangoPkgImporterSchema1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Imports) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD0dbfd34DecodeGithubComDecafEmuHuehuetenangoPkgImporterSchema1(l, v)
}
func easyjsonD0dbfd34DecodeGithubComDecafEmuHuehuetenangoPkgImporterSchema2(in *jlexer.Lexer, out *Exports) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]string, 0, 4)
					} else {
						out.Data = []string{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Data = append(out.Data, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "functions":
			if in.IsNull() {
				in.Skip()
				out.Functions = nil
			} else {
				in.Delim('[')
				if out.Functions == nil {
					if !in.IsDelim(']') {
						out.Functions = make([]string, 0, 4)
					} else {
						out.Functions = []string{}
					}
				} else {
					out.Functions = (out.Functions)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.Functions = append(out.Functions, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD0dbfd34EncodeGithubComDecafEmuHuehuetenangoPkgImporterSchema2(out *jwriter.Writer, in Exports) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v12, v13 := range in.Data {
			if v12 > 0 {
				out.RawByte(',')
			}
			out.String(string(v13))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"functions\":")
	if in.Functions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v14, v15 := range in.Functions {
			if v14 > 0 {
				out.RawByte(',')
			}
			out.String(string(v15))
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Exports) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD0dbfd34EncodeGithubComDecafEmuHuehuetenangoPkgImporterSchema2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Exports) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD0dbfd34EncodeGithubComDecafEmuHuehuetenangoPkgImporterSchema2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Exports) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD0dbfd34DecodeGithubComDecafEmuHuehuetenangoPkgImporterSchema2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Exports) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD0dbfd34DecodeGithubComDecafEmuHuehuetenangoPkgImporterSchema2(l, v)
}
