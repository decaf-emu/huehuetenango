// AUTOGENERATED FILE: easyjson marshaler/unmarshalers.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE7952480DecodeGithubComDecafEmuHuehuetenangoPkgModels(in *jlexer.Lexer, out *Title) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = TitleID(in.Uint64())
		case "HexID":
			out.HexID = string(in.String())
		case "Version":
			out.Version = uint16(in.Uint16())
		case "ProductCode":
			out.ProductCode = string(in.String())
		case "LongNameEnglish":
			out.LongNameEnglish = string(in.String())
		case "ShortNameEnglish":
			out.ShortNameEnglish = string(in.String())
		case "PublisherEnglish":
			out.PublisherEnglish = string(in.String())
		case "Region":
			out.Region = uint32(in.Uint32())
		case "ArgString":
			out.ArgString = string(in.String())
		case "CodeGenerationSize":
			out.CodeGenerationSize = uint32(in.Uint32())
		case "CodeGenerationCore":
			out.CodeGenerationCore = uint32(in.Uint32())
		case "MaximumSize":
			out.MaximumSize = uint32(in.Uint32())
		case "MaximumCodeSize":
			out.MaximumCodeSize = uint32(in.Uint32())
		case "OverlayArena":
			out.OverlayArena = uint32(in.Uint32())
		case "Permissions":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				in.Delim('[')
				if out.Permissions == nil {
					if !in.IsDelim(']') {
						out.Permissions = make([]*Permission, 0, 8)
					} else {
						out.Permissions = []*Permission{}
					}
				} else {
					out.Permissions = (out.Permissions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Permission
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Permission)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Permissions = append(out.Permissions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE7952480EncodeGithubComDecafEmuHuehuetenangoPkgModels(out *jwriter.Writer, in Title) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ID\":")
	out.Uint64(uint64(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"HexID\":")
	out.String(string(in.HexID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Version\":")
	out.Uint16(uint16(in.Version))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ProductCode\":")
	out.String(string(in.ProductCode))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"LongNameEnglish\":")
	out.String(string(in.LongNameEnglish))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ShortNameEnglish\":")
	out.String(string(in.ShortNameEnglish))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"PublisherEnglish\":")
	out.String(string(in.PublisherEnglish))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Region\":")
	out.Uint32(uint32(in.Region))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ArgString\":")
	out.String(string(in.ArgString))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"CodeGenerationSize\":")
	out.Uint32(uint32(in.CodeGenerationSize))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"CodeGenerationCore\":")
	out.Uint32(uint32(in.CodeGenerationCore))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"MaximumSize\":")
	out.Uint32(uint32(in.MaximumSize))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"MaximumCodeSize\":")
	out.Uint32(uint32(in.MaximumCodeSize))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"OverlayArena\":")
	out.Uint32(uint32(in.OverlayArena))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Permissions\":")
	if in.Permissions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Permissions {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Title) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE7952480EncodeGithubComDecafEmuHuehuetenangoPkgModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Title) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE7952480EncodeGithubComDecafEmuHuehuetenangoPkgModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Title) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE7952480DecodeGithubComDecafEmuHuehuetenangoPkgModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Title) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE7952480DecodeGithubComDecafEmuHuehuetenangoPkgModels(l, v)
}
func easyjsonE7952480DecodeGithubComDecafEmuHuehuetenangoPkgModels1(in *jlexer.Lexer, out *Permission) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Group":
			out.Group = uint32(in.Uint32())
		case "Mask":
			out.Mask = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE7952480EncodeGithubComDecafEmuHuehuetenangoPkgModels1(out *jwriter.Writer, in Permission) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Group\":")
	out.Uint32(uint32(in.Group))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Mask\":")
	out.Uint64(uint64(in.Mask))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Permission) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE7952480EncodeGithubComDecafEmuHuehuetenangoPkgModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Permission) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE7952480EncodeGithubComDecafEmuHuehuetenangoPkgModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Permission) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE7952480DecodeGithubComDecafEmuHuehuetenangoPkgModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Permission) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE7952480DecodeGithubComDecafEmuHuehuetenangoPkgModels1(l, v)
}
